name: Extractor Test

on:
  workflow_dispatch:
    inputs:
      urls:
        description: "改行区切りのテストURL（空ならデフォルトを使用）"
        required: false
        default: ""

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run extractor smoke test
        env:
          INPUT_URLS: ${{ github.event.inputs.urls }}
          EXTRACTOR_DEBUG: "1"
          PYTHONUNBUFFERED: "1"
        run: |
          echo "import os, json" > run_extract_test.py
          echo "from supplier_extractors import fetch_html, extract_supplier_info" >> run_extract_test.py
          echo "raw = os.environ.get('INPUT_URLS','').strip()" >> run_extract_test.py
          echo "urls = [u.strip() for u in raw.splitlines() if u.strip()]" >> run_extract_test.py
          echo "if not urls: urls = ['https://netmall.hardoff.co.jp/product/5372313/']" >> run_extract_test.py
          echo "print('URLS:', urls, flush=True)" >> run_extract_test.py
          echo "results = []" >> run_extract_test.py
          echo "for i,u in enumerate(urls,1):" >> run_extract_test.py
          echo "    print(f'[{i}/{len(urls)}] GET {u}', flush=True)" >> run_extract_test.py
          echo "    try:" >> run_extract_test.py
          echo "        html = fetch_html(u)" >> run_extract_test.py
          echo "        info = extract_supplier_info(u, html)" >> run_extract_test.py
          echo "        rec = {'url':u,'stock':info.get('stock'),'qty':info.get('qty'),'price':info.get('price'),'debug':info.get('_debug',{})}" >> run_extract_test.py
          echo "        print(json.dumps(rec,ensure_ascii=False,indent=2), flush=True)" >> run_extract_test.py
          echo "        results.append(rec)" >> run_extract_test.py
          echo "    except Exception as e:" >> run_extract_test.py
          echo "        rec = {'url':u,'error':str(e)}" >> run_extract_test.py
          echo "        print('ERROR:', rec, flush=True)" >> run_extract_test.py
          echo "        results.append(rec)" >> run_extract_test.py
          echo "with open('extractor_results.json','w',encoding='utf-8') as f: json.dump(results,f,ensure_ascii=False,indent=2)" >> run_extract_test.py
          echo "print('WROTE extractor_results.json', flush=True)" >> run_extract_test.py

          python run_extract_test.py

      - name: Upload extractor results
        uses: actions/upload-artifact@v4
        with:
          name: extractor_results
          path: extractor_results.json
